
---let's create Load_Person_D loader
---remember that in order to maintain all versions of a Person under the same ID, we created a sequence
CREATE OR ALTER PROCEDURE LOADER_PERSON_D AS
BEGIN

	BEGIN

		DECLARE @CHECKPOINT DATETIME, @NEWCHECKPOINT DATETIME
		DECLARE @SOURCE_COLUMNS INT, @ROWS_INS INT, @ROWS_DEL INT, @ROWS_UPD INT, @ROWS_SKIP INT

		DECLARE @PERSON_D_ID INT, @PERSON_UNQ_D_ID INT, @PERSON_SRC_ID INT, @FULL_NAME NVARCHAR(50),
			@PREFERRED_NAME NVARCHAR(50), @IS_PERMITTED_TO_LOGON BIT, @LOGON_NAME NVARCHAR(50),
			@IS_EXTERNAL_LOGON_PROVIDER BIT, @IS_SYSTEM_USER BIT, @IS_EMPLOYEE BIT, @IS_SALESPERSON BIT,
			@PHONE_NUMBER NVARCHAR(50), @FAX_NUMBER NVARCHAR(50), @EMAIL_ADDRESS NVARCHAR(50), 
			@VALIDFROM DATETIME2(7)
	
		DECLARE @N_PERSON_D_ID INT, @N_PERSON_UNQ_D_ID INT, @N_PERSON_SRC_ID INT, @N_FULL_NAME NVARCHAR(50),
			@N_PREFERRED_NAME NVARCHAR(50), @N_IS_PERMITTED_TO_LOGON BIT, @N_LOGON_NAME NVARCHAR(50),
			@N_IS_EXTERNAL_LOGON_PROVIDER BIT, @N_IS_SYSTEM_USER BIT, @N_IS_EMPLOYEE BIT, @N_IS_SALESPERSON BIT,
			@N_PHONE_NUMBER NVARCHAR(50), @N_FAX_NUMBER NVARCHAR(50), @N_EMAIL_ADDRESS NVARCHAR(50)

	SELECT
		@CHECKPOINT = a.RUN_DT
	FROM
		(
			SELECT 
				MAX(b.RUN_DT) RUN_DT
			FROM
				(
					SELECT RUN_DT FROM [dbo].[RUNS] WHERE RUN_NAME = 'PERSON_D'
					UNION 
					SELECT CONVERT([datetime], '1990-01-01 00:00:00') RUN_DT
				)b
		) a
		SELECT @NEWCHECKPOINT = GETDATE(), @SOURCE_COLUMNS = 0, @ROWS_INS = 0, @ROWS_DEL = 0, @ROWS_UPD = 0, @ROWS_SKIP = 0

	IF @CHECKPOINT = NULL

	BEGIN
		SET @CHECKPOINT = CONVERT([DATETIME],'1990-01-01 00:00:00')
	END

	DECLARE DB_CURSOR CURSOR FOR
		SELECT 
			PERSONID
			, FULLNAME
			, PREFERREDNAME
			, ISPERMITTEDTOLOGON
			, LOGONNAME
			, ISEXTERNALLOGONPROVIDER
			, ISSYSTEMUSER
			, ISEMPLOYEE
			, ISSALESPERSON
			, PHONENUMBER
			, FAXNUMBER
			, EMAILADDRESS
			, VALIDFROM
		FROM
			WideWorldImporters.[Application].People
		FOR SYSTEM_TIME
			BETWEEN @CHECKPOINT AND @NEWCHECKPOINT
		ORDER BY
			PERSONID, VALIDFROM
		OPEN DB_CURSOR
		FETCH NEXT FROM DB_CURSOR INTO @PERSON_SRC_ID, @FULL_NAME, @PREFERRED_NAME, @IS_PERMITTED_TO_LOGON, @LOGON_NAME, 
			@IS_EXTERNAL_LOGON_PROVIDER, @IS_SYSTEM_USER, @IS_EMPLOYEE, @IS_SALESPERSON, @PHONE_NUMBER, @FAX_NUMBER,
			@EMAIL_ADDRESS, @VALIDFROM

		WHILE @@FETCH_STATUS = 0
		BEGIN

		SET @SOURCE_COLUMNS = @SOURCE_COLUMNS + 1
		--- In the event the person does not exist, we will insert. notice use of PERSON_UNQ_ID while the PERSON_D_ID record is the point in time record for the person
		IF NOT EXISTS (SELECT PERSON_D_ID FROM PERSON_D WHERE PERSON_SRC_ID = @PERSON_SRC_ID)
		BEGIN
			SET @ROWS_INS = @ROWS_INS + 1
		INSERT INTO PERSON_D (PERSON_UNQ_D_ID, PERSON_SRC_ID, FULL_NAME, PREFERRED_NAME, IS_PERMITTED_TO_LOGON,
					LOGON_NAME, IS_EXTERNAL_LOGON_PROVIDER, IS_SYSTEM_USER, IS_EMPLOYEE, IS_SALESPERSON, PHONE_NUMBER,
					FAX_NUMBER, EMAIL_ADDRESS, CREATED_DATE, LAST_UPDATE_DATE) 
				---- note SQ_PERSON
		VALUES (NEXT VALUE FOR SQ_PERSON, @PERSON_SRC_ID, @FULL_NAME, @PREFERRED_NAME, @IS_PERMITTED_TO_LOGON, 
					@LOGON_NAME, @IS_EXTERNAL_LOGON_PROVIDER, @IS_SYSTEM_USER, @IS_EMPLOYEE, @IS_SALESPERSON, 
					@PHONE_NUMBER, @FAX_NUMBER, @EMAIL_ADDRESS, @VALIDFROM, @VALIDFROM)

		END 
		ELSE 
		BEGIN
			SELECT 
			@N_PERSON_UNQ_D_ID = a.PERSON_UNQ_D_ID --- will remain persistant across all versions of the person 
					, @N_FULL_NAME = a.FULL_NAME
					, @N_PREFERRED_NAME = a.PREFERRED_NAME
					, @N_IS_PERMITTED_TO_LOGON = a.IS_PERMITTED_TO_LOGON
					, @N_LOGON_NAME = a.LOGON_NAME
					, @N_IS_EXTERNAL_LOGON_PROVIDER = a.IS_EXTERNAL_LOGON_PROVIDER
					, @N_IS_SYSTEM_USER = a.IS_SYSTEM_USER
					, @N_IS_EMPLOYEE = a.IS_EMPLOYEE
					, @N_IS_SALESPERSON = a.IS_SALESPERSON
					, @N_PHONE_NUMBER = a.PHONE_NUMBER
					, @N_FAX_NUMBER = a.FAX_NUMBER
					, @N_EMAIL_ADDRESS = a.EMAIL_ADDRESS
			FROM
				PERSON_D a
				INNER JOIN
				(
					SELECT
					--- getting the latest point in time value for the person, want to make sure we compare to the latest
						ROW_NUMBER () OVER (ORDER BY PERSON_D_ID DESC) AS ROW
						, PERSON_D_ID
						, PERSON_UNQ_D_ID
					FROM
						PERSON_D
					WHERE
					--- multiple rows over time for every SRC id, SRC id stays same and we do it like this due to it being from a temportal table
						PERSON_SRC_ID = @PERSON_SRC_ID
			)	b	ON
					a.PERSON_D_ID = b.PERSON_D_ID
		WHERE
			PERSON_SRC_ID = @PERSON_SRC_ID
			AND b.[ROW]= 1

		IF @N_FULL_NAME <> @FULL_NAME OR @N_PREFERRED_NAME <> @PREFERRED_NAME OR @N_IS_PERMITTED_TO_LOGON <> @IS_PERMITTED_TO_LOGON OR
			@N_LOGON_NAME <> @LOGON_NAME OR @IS_EXTERNAL_LOGON_PROVIDER <> @IS_EXTERNAL_LOGON_PROVIDER OR
			@N_IS_SYSTEM_USER <> @IS_SYSTEM_USER OR @N_IS_EMPLOYEE <> @IS_EMPLOYEE OR @N_IS_SALESPERSON <> @IS_SALESPERSON OR
			@N_PHONE_NUMBER <> @PHONE_NUMBER OR @N_FAX_NUMBER <> @FAX_NUMBER OR @N_EMAIL_ADDRESS <> @EMAIL_ADDRESS
		BEGIN


		SET @ROWS_UPD = @ROWS_UPD + 1
		--- becuase it is a slowly changing dimesnion we will use INSERT.. & not UPDATE (but will act like update)  in the event of a discrepency(checking for discrepency was not a few lines above)

		INSERT INTO PERSON_D (PERSON_UNQ_D_ID, PERSON_SRC_ID, FULL_NAME, PREFERRED_NAME, IS_PERMITTED_TO_LOGON,
			LOGON_NAME, IS_EXTERNAL_LOGON_PROVIDER, IS_SYSTEM_USER, IS_EMPLOYEE, IS_SALESPERSON, PHONE_NUMBER,
			FAX_NUMBER, EMAIL_ADDRESS, CREATED_DATE, LAST_UPDATE_DATE)
--- if you look at the select statement above , the unq id was assigned to the most up to date record to 

		VALUES (@N_PERSON_UNQ_D_ID, @PERSON_SRC_ID, @FULL_NAME, @PREFERRED_NAME, @IS_PERMITTED_TO_LOGON, 
				@LOGON_NAME, @IS_EXTERNAL_LOGON_PROVIDER, @IS_SYSTEM_USER, @IS_EMPLOYEE, @IS_SALESPERSON, 
				@PHONE_NUMBER, @FAX_NUMBER, @EMAIL_ADDRESS, @VALIDFROM, @VALIDFROM)
	END
	ELSE 
	BEGIN

		SET @ROWS_SKIP = @ROWS_SKIP + 1

	END
END
FETCH NEXT FROM DB_CURSOR INTO @PERSON_SRC_ID, @FULL_NAME, @PREFERRED_NAME, @IS_PERMITTED_TO_LOGON, @LOGON_NAME, 
				@IS_EXTERNAL_LOGON_PROVIDER, @IS_SYSTEM_USER, @IS_EMPLOYEE, @IS_SALESPERSON, @PHONE_NUMBER, @FAX_NUMBER,
				@EMAIL_ADDRESS, @VALIDFROM

	END

		CLOSE DB_CURSOR
		DEALLOCATE DB_CURSOR

		INSERT INTO [dbo].[RUNS] (RUN_NAME, RUN_DT, SOURCE_COLUMNS, ROWS_INS, ROWS_DEL, ROWS_UPD, ROWS_SKIP) 
			VALUES ('PERSON_D', @NEWCHECKPOINT, @SOURCE_COLUMNS, @ROWS_INS, @ROWS_DEL, @ROWS_UPD, @ROWS_SKIP)

	END

END
GO
