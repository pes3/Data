
--- CREATE LOADER FOR FACT TABLE
CREATE OR ALTER PROCEDURE LOADER_ORDER_F AS 
BEGIN
--- Checkpoint & audit 
DECLARE @CHECKPOINT DATETIME, @NEWCHECKPOINT DATETIME
DECLARE @SOURCE_COLUMNS INT, @ROWS_INS INT, @ROWS_DEL INT, @ROWS_UPD INT, @ROWS_SKIP INT
---Source
DECLARE @ORDERID INT, @CUSTOMERID INT, @SALESPERSONID INT, @PICKPERSONID INT, @CONTACTPERSONID INT,
@ORDERDATE DATE, @EXDELDATE DATE, @PURCHASENUMBER NVARCHAR(20), @ISBACKORDER BIT, @PICK_COMPLETE DATETIME2(7)
--lookups
DECLARE @ORDER_F_ID INT, @CUSTOMER_D_ID INT, @SALE_PERSON_UNQ_D_ID INT, @PICKED_PERSON_UNQ_D_ID INT, 
@CONTACT_PERSON_UNQ_D_ID INT, @ORDER_DATE DATE, @EXPECTED_DELIVERY_DATE DATE, @PONUMBER NVARCHAR(20),
@IS_UNDERSUPPLY_BACKORDER BIT, @PICKING_COMPLETED DATETIME2(7)
---datawarehouse
DECLARE @N_CUSTOMER_D_ID INT, @N_SALE_PERSON_UNQ_D_ID INT, @N_PICKED_PERSON_UNQ_D_ID INT, 
@N_CONTACT_PERSON_UNQ_D_ID INT, @N_ORDER_DATE DATE, @N_EXPECTED_DELIVERY_DATE DATE, @N_PONUMBER NVARCHAR(20),
@N_IS_UNDERSUPPLY_BACKORDER BIT, @N_PICKING_COMPLETED DATETIME2(7)
--- run checkpoint

Select
@CHECKPOINT = a.RUN_DT

	FROM

			(
				SELECT 
					MAX(b.RUN_DT) RUN_DT
				FROM
					(
						SELECT RUN_DT FROM [dbo].[RUNS] WHERE RUN_NAME = 'ORDER_F'
						UNION
						SELECT CONVERT([datetime],'1990-01-01 00:00:00') RUN_DT
					)b
			) a

	
		SELECT @NEWCHECKPOINT = GETDATE(), @SOURCE_COLUMNS = 0, @ROWS_INS = 0, @ROWS_DEL = 0, @ROWS_UPD = 0, @ROWS_SKIP = 0

		IF @CHECKPOINT = NULL
		BEGIN
			SET @CHECKPOINT = CONVERT([datetime],'1990-01-01 00:00:00')
		END

		DECLARE DB_CURSOR CURSOR FOR 
			SELECT
				ORDERID
				, CUSTOMERID
				, SALESPERSONPERSONID
				, PICKEDBYPERSONID
				, CONTACTPERSONID
				, ORDERDATE
				, EXPECTEDDELIVERYDATE
				, CUSTOMERPURCHASEORDERNUMBER
				, ISUNDERSUPPLYBACKORDERED
				, PICKINGCOMPLETEDWHEN
			FROM
				WideWorldImporters.Sales.Orders
			WHERE
				LASTEDITEDWHEN BETWEEN @CHECKPOINT AND @NEWCHECKPOINT
			ORDER BY
				ORDERID

		OPEN DB_CURSOR
		FETCH NEXT FROM DB_CURSOR INTO @ORDERID, @CUSTOMERID, @SALESPERSONID, @PICKPERSONID, @CONTACTPERSONID, @ORDERDATE, 
			@EXDELDATE, @PURCHASENUMBER, @ISBACKORDER, @PICK_COMPLETE
--- while loop starting on first row
		WHILE @@FETCH_STATUS = 0
		BEGIN

			SET @SOURCE_COLUMNS = @SOURCE_COLUMNS + 1

			IF NOT EXISTS (SELECT CUSTOMER_D_ID FROM CUSTOMER_D WHERE CUSTOMER_SRC_ID = @CUSTOMERID)
			BEGIN

				SET @CUSTOMER_D_ID = -999

			END
			ELSE
			BEGIN
			SELECT @CUSTOMER_D_ID = CUSTOMER_D_ID FROM CUSTOMER_D WHERE CUSTOMER_SRC_ID = @CUSTOMERID
	
			END

			IF NOT EXISTS (SELECT PERSON_D_ID FROM PERSON_D WHERE PERSON_SRC_ID = @SALESPERSONID)
			BEGIN

				SET @SALE_PERSON_UNQ_D_ID = -999

			END
			ELSE
			BEGIN
			--- not using slowly changing dimension because degree of accuracy not needed, just grabbing most recent version
				SELECT @SALE_PERSON_UNQ_D_ID = MAX(PERSON_UNQ_D_ID) FROM PERSON_D WHERE PERSON_SRC_ID = @SALESPERSONID

			END
-- PICKED PERSON

			IF NOT EXISTS (SELECT PERSON_D_ID FROM PERSON_D WHERE PERSON_SRC_ID = @PICKPERSONID)
			BEGIN

				SET @PICKED_PERSON_UNQ_D_ID = -999

			END
			ELSE
			BEGIN

				SELECT @PICKED_PERSON_UNQ_D_ID = MAX(PERSON_UNQ_D_ID) FROM PERSON_D WHERE PERSON_SRC_ID = @PICKPERSONID

			END

			IF NOT EXISTS (SELECT PERSON_D_ID FROM PERSON_D WHERE PERSON_SRC_ID = @CONTACTPERSONID)
			BEGIN

				SET @CONTACT_PERSON_UNQ_D_ID = -999

			END
			ELSE
			BEGIN

				SELECT @CONTACT_PERSON_UNQ_D_ID = MAX(PERSON_UNQ_D_ID) FROM PERSON_D WHERE PERSON_SRC_ID = @CONTACTPERSONID

			END

			IF NOT EXISTS (SELECT ORDER_F_ID FROM ORDER_F WHERE ORDER_SRC_ID = @ORDERID)
			BEGIN

				SET @ROWS_INS = @ROWS_INS + 1

				INSERT INTO ORDER_F (ORDER_SRC_ID, CUSTOMER_D_ID, SALES_PERSON_UNQ_D_ID, PICKED_PERSON_UNQ_D_ID, CONTACT_PERSON_UNQ_D_ID,
					ORDER_DATE, EXPECTED_DELIVERY_DATE, PONUMBER, IS_UNDERSUPPLY_BACKORDER, PICKING_COMPLETED)	
				VALUES (@ORDERID, @CUSTOMER_D_ID, @SALE_PERSON_UNQ_D_ID, @PICKED_PERSON_UNQ_D_ID, @CONTACT_PERSON_UNQ_D_ID, @ORDERDATE, @EXDELDATE,
					@PURCHASENUMBER, @ISBACKORDER, @PICK_COMPLETE)

			END
			ELSE
			BEGIN

				SELECT
					@N_CUSTOMER_D_ID = CUSTOMER_D_ID
					, @N_SALE_PERSON_UNQ_D_ID = SALES_PERSON_UNQ_D_ID
					, @N_PICKED_PERSON_UNQ_D_ID = PICKED_PERSON_UNQ_D_ID
					, @N_CONTACT_PERSON_UNQ_D_ID = CONTACT_PERSON_UNQ_D_ID
					, @N_ORDER_DATE = ORDER_DATE
					, @N_EXPECTED_DELIVERY_DATE = EXPECTED_DELIVERY_DATE
					, @N_PONUMBER = PONUMBER
					, @N_IS_UNDERSUPPLY_BACKORDER = IS_UNDERSUPPLY_BACKORDER
					, @N_PICKING_COMPLETED = PICKING_COMPLETED
				FROM
					ORDER_F
				WHERE
					ORDER_SRC_ID = @ORDERID

				IF @N_CUSTOMER_D_ID <> @CUSTOMER_D_ID OR @N_SALE_PERSON_UNQ_D_ID <> @SALE_PERSON_UNQ_D_ID OR
					@N_PICKED_PERSON_UNQ_D_ID <> @PICKED_PERSON_UNQ_D_ID OR @N_CONTACT_PERSON_UNQ_D_ID <> @CONTACT_PERSON_UNQ_D_ID OR
					@N_ORDER_DATE <> @ORDER_DATE OR @N_EXPECTED_DELIVERY_DATE <> @EXPECTED_DELIVERY_DATE OR
					@N_PONUMBER <> @PONUMBER OR @N_IS_UNDERSUPPLY_BACKORDER <> @IS_UNDERSUPPLY_BACKORDER OR
					@N_PICKING_COMPLETED <> @PICKING_COMPLETED
				BEGIN

					SET @ROWS_UPD = @ROWS_UPD + 1

					UPDATE
						ORDER_F
					SET
						CUSTOMER_D_ID = @CUSTOMER_D_ID
						, SALES_PERSON_UNQ_D_ID = @SALE_PERSON_UNQ_D_ID
						, PICKED_PERSON_UNQ_D_ID = @PICKED_PERSON_UNQ_D_ID
						, CONTACT_PERSON_UNQ_D_ID = @CONTACT_PERSON_UNQ_D_ID
						, ORDER_DATE = @ORDER_DATE
						, EXPECTED_DELIVERY_DATE = @EXPECTED_DELIVERY_DATE
						, PONUMBER = @PONUMBER
						, IS_UNDERSUPPLY_BACKORDER = @IS_UNDERSUPPLY_BACKORDER
						, PICKING_COMPLETED = @PICKING_COMPLETED
						, LAST_UPDATE_DATE = GETDATE()
					WHERE
						ORDER_SRC_ID = @ORDERID

				END
				ELSE
				BEGIN

					SET @ROWS_SKIP = @ROWS_SKIP + 1

				END

			END

			FETCH NEXT FROM DB_CURSOR INTO @ORDERID, @CUSTOMERID, @SALESPERSONID, @PICKPERSONID, @CONTACTPERSONID, @ORDERDATE, 
				@EXDELDATE, @PURCHASENUMBER, @ISBACKORDER, @PICK_COMPLETE

		END

		CLOSE DB_CURSOR
		DEALLOCATE DB_CURSOR

		INSERT INTO [dbo].[RUNS] (RUN_NAME, RUN_DT, SOURCE_COLUMNS, ROWS_INS, ROWS_DEL, ROWS_UPD, ROWS_SKIP) 
			VALUES ('ORDER_F', @NEWCHECKPOINT, @SOURCE_COLUMNS, @ROWS_INS, @ROWS_DEL, @ROWS_UPD, @ROWS_SKIP)

	END


GO

--- fact tables are typically not harder than dimension, except when dealing with complex lookups for dimensions (ie bridge tables or slowly changing dimensions
--- .. or more difficult if you are doing an 'aggregate fact table' , which is a fact table that has a summary, aggegate or count being applied to it before going into a database... more computing across rows to add a row to db
