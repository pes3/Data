CREATE OR ALTER PROCEDURE LOADER_CUSTOMER_D AS 
BEGIN
--- let's create the LOADER_CUSTOMER_D loader for the customer dimension 

	BEGIN

		DECLARE @CHECKPOINT DATETIME, @NEWCHECKPOINT DATETIME
		DECLARE @SOURCE_COLUMNS INT, @ROWS_INS INT, @ROWS_DEL INT, @ROWS_UPD INT, @ROWS_SKIP INT
	--- define for our source
		DECLARE @CUSTOMER_D_ID INT, @CUSTOMER_ID INT, @CUSTOMER_NAME NVARCHAR(100), @BILL_TO_CUSTOMER_ID INT, 
			@CUSTOMER_CATEGORY_ID INT, @BUYING_GROUP_ID INT, @PRIMARY_CONTACT_PERSON_ID INT,
			@ALT_CONTACT_PERSON_ID INT, @DELIVERY_METHOD_ID INT, @DELIVERY_CITY_ID INT, @POSTAL_CITY_ID INT,
			@CREDIT_LIMIT DECIMAL(18,2), @OPEN_DATE DATE, @DISCOUNT DECIMAL(18,3), @IS_STMT_SENT BIT,
			@IS_CREDIT_HOLD BIT, @PAYMENT_DAYS INT, @PHONE_NUMBER NVARCHAR(20), @FAX_NUMBER NVARCHAR(20),
			@DELIVERY_RUN NVARCHAR(5), @RUN_POS NVARCHAR(5), @WEB NVARCHAR(256), @DELIVERY_ADDR1 NVARCHAR(60),
			@DELIVERY_ADDR2 NVARCHAR(60), @DELIVERY_POSTAL_CODE NVARCHAR(10), @DELIVERY_LOC GEOGRAPHY,
			@POST_ADDR1 NVARCHAR(60), @POST_ADDR2 NVARCHAR(60), @POST_ADDR_CODE NCHAR(10)	
			--- middle set , becaues customer table connects to all other dimesnion tables we already created,we create variables so we do not have to loook up the D_ID values each time when interacting with them

		DECLARE @BILL_TO_CUSTOMER_D_ID INT, @CUSTOMER_CATEGORY_D_ID INT, @BUYING_GROUP_D_ID INT, @PRIMARY_CONTACT_PERSON_D_ID INT,
			@PRIMARY_CONTACT_PERSON_UNQ_D_ID INT, @ALT_CONTACT_PERSON_D_ID INT, @ALT_CONTACT_PERSON_UNQ_D_ID INT,
			@DELIVERY_METHOD_D_ID INT, @DELIVERY_CITY_D_ID INT, @POSTAL_CITY_D_ID INT
			--- for our datawharhouse in the event of an update
		DECLARE @N_CUSTOMER_NAME NVARCHAR(100), @N_BILL_TO_CUSTOMER_D_ID INT, @N_CUSTOMER_CATEGORY_D_ID INT, @N_BUYING_GROUP_D_ID INT
			, @N_PRIMARY_CONTACT_PERSON_D_ID INT, @N_ALT_CONTACT_PERSON_D_ID INT, @N_DELIVERY_METHOD_D_ID INT, @N_DELIVERY_CITY_D_ID INT
			, @N_POSTAL_CITY_D_ID INT, @N_CREDIT_LIMIT DECIMAL(18,2), @N_OPEN_DATE DATE, @N_DISCOUNT DECIMAL(18,3), @N_IS_STMT_SENT BIT
			, @N_IS_CREDIT_HOLD BIT, @N_PAYMENT_DAYS INT, @N_PHONE_NUMBER NVARCHAR(20), @N_FAX_NUMBER NVARCHAR(20), @N_DELIVERY_RUN NVARCHAR(5)
			, @N_RUN_POS NVARCHAR(5), @N_WEB NVARCHAR(256), @N_DELIVERY_ADDR1 NVARCHAR(60), @N_DELIVERY_ADDR2 NVARCHAR(60), @N_DELIVERY_POSTAL_CODE NCHAR(10)
			, @N_DELIVERY_LOC GEOGRAPHY, @N_POST_ADDR1 NVARCHAR(60), @N_POST_ADDR2 NVARCHAR(60), @N_POST_ADDR_CODE NCHAR(10)

		SELECT
			@CHECKPOINT = a.RUN_DT
		FROM
			(
				SELECT 
					MAX(b.RUN_DT) RUN_DT
				FROM
					(
						SELECT RUN_DT FROM [dbo].[RUNS] WHERE RUN_NAME = 'CUSTOMER_D'
						UNION
						SELECT CONVERT([datetime],'1990-01-01 00:00:00') RUN_DT
					)b
			) a

		SELECT @NEWCHECKPOINT = GETDATE(), @SOURCE_COLUMNS = 0, @ROWS_INS = 0, @ROWS_DEL = 0, @ROWS_UPD = 0, @ROWS_SKIP = 0

		IF @CHECKPOINT = NULL
		BEGIN
			SET @CHECKPOINT = CONVERT([datetime],'1990-01-01 00:00:00')
		END

		DECLARE DB_CURSOR CURSOR FOR
			SELECT
				CustomerID, CustomerName, BillToCustomerID, CustomerCategoryID, BuyingGroupID, PrimaryContactPersonID, AlternateContactPersonID,
				DeliveryMethodID, DeliveryCityID, PostalCityID, CreditLimit, AccountOpenedDate, StandardDiscountPercentage, IsStatementSent,
				IsOnCreditHold, PaymentDays, PhoneNumber, FaxNumber, DeliveryRun, RunPosition, WebsiteURL, DeliveryAddressLine1,
				DeliveryAddressLine2, DeliveryPostalCode, DeliveryLocation, PostalAddressLine1, PostalAddressLine2,
				PostalPostalCode
			FROM
				WideWorldImporters.[Sales].Customers
			FOR SYSTEM_TIME
				BETWEEN @CHECKPOINT AND @NEWCHECKPOINT
			ORDER BY
				CustomerID, VALIDFROM
		--- storing of row into variables 
		OPEN DB_CURSOR
		FETCH NEXT FROM DB_CURSOR INTO @CUSTOMER_ID, @CUSTOMER_NAME, @BILL_TO_CUSTOMER_ID, 
			@CUSTOMER_CATEGORY_ID, @BUYING_GROUP_ID, @PRIMARY_CONTACT_PERSON_ID,
			@ALT_CONTACT_PERSON_ID, @DELIVERY_METHOD_ID, @DELIVERY_CITY_ID, @POSTAL_CITY_ID,
			@CREDIT_LIMIT, @OPEN_DATE, @DISCOUNT, @IS_STMT_SENT,
			@IS_CREDIT_HOLD, @PAYMENT_DAYS, @PHONE_NUMBER, @FAX_NUMBER,
			@DELIVERY_RUN, @RUN_POS, @WEB, @DELIVERY_ADDR1,
			@DELIVERY_ADDR2, @DELIVERY_POSTAL_CODE, @DELIVERY_LOC,
			@POST_ADDR1, @POST_ADDR2, @POST_ADDR_CODE

		WHILE @@FETCH_STATUS = 0
		BEGIN

			SET @SOURCE_COLUMNS = @SOURCE_COLUMNS + 1
	
	---looking up values of our source system to our DWH
	---PROCESS LOOKUPS

			IF (@CUSTOMER_ID = @BILL_TO_CUSTOMER_ID)
			BEGIN
				SET @BILL_TO_CUSTOMER_D_ID = -999

			END
			ELSE
			BEGIN

				IF NOT EXISTS (SELECT CUSTOMER_D_ID FROM CUSTOMER_D WHERE CUSTOMER_SRC_ID = @BILL_TO_CUSTOMER_ID)
				BEGIN

					SET @BILL_TO_CUSTOMER_D_ID = -999

				END
				ELSE
				BEGIN

					SELECT @BILL_TO_CUSTOMER_D_ID = CUSTOMER_D_ID FROM CUSTOMER_D WHERE CUSTOMER_SRC_ID = @BILL_TO_CUSTOMER_ID
				END
			END
			--- LOOK TO SEE IF WE HAVE CUSTOMER CATEGORY, SET IT TO NULL, IF ITS NOT NULL STORE VALUE FROM dwh
			IF NOT EXISTS (SELECT CUSTOMER_CATEGORY_D_ID FROM CUSTOMER_CATEGORY_D WHERE CATEGORY_SRC_ID = @CUSTOMER_CATEGORY_ID)
			BEGIN

				SET @CUSTOMER_CATEGORY_D_ID = -999
			END
			ELSE
			BEGIN

				SELECT @CUSTOMER_CATEGORY_D_ID = CUSTOMER_CATEGORY_D_ID FROM CUSTOMER_CATEGORY_D WHERE CATEGORY_SRC_ID = @CUSTOMER_CATEGORY_ID

			END

			IF NOT EXISTS (SELECT BUYING_GROUP_D_ID FROM BUYING_GROUP_D WHERE GROUP_SRC_ID = @BUYING_GROUP_ID)
			BEGIN
				SET @BUYING_GROUP_D_ID = -999
			END
			ELSE
			BEGIN

				SELECT @BUYING_GROUP_D_ID = BUYING_GROUP_D_ID FROM BUYING_GROUP_D WHERE GROUP_SRC_ID = @BUYING_GROUP_ID
			END

			IF NOT EXISTS (SELECT PERSON_D_ID FROM PERSON_D WHERE PERSON_SRC_ID = @PRIMARY_CONTACT_PERSON_ID)
			BEGIN
				SET @PRIMARY_CONTACT_PERSON_D_ID = -999
				SET @PRIMARY_CONTACT_PERSON_UNQ_D_ID = -999
			END
			ELSE
			BEGIN
			--- slowsly changing dimension, so person will be different, we see any (could be multiple rows)
			--- if none, set to 999
			--- if we do find a match, we find the most recent version in the dwh to store as value
			--- ...&schedule delta loads to run faster to reduce lag
			--- ...higher degree of accuracy/complexity would be to time bound via to/from date in customer table & compare this to the person table
			
				SELECT 
					@PRIMARY_CONTACT_PERSON_D_ID = a.PERSON_D_ID
					, @PRIMARY_CONTACT_PERSON_UNQ_D_ID = a.PERSON_UNQ_D_ID
				FROM
					PERSON_D a
					INNER JOIN
					(
						SELECT
							ROW_NUMBER() OVER(ORDER BY PERSON_D_ID DESC) AS ROW
							, PERSON_D_ID
							, PERSON_UNQ_D_ID
						FROM
							PERSON_D
						WHERE
							PERSON_SRC_ID = @PRIMARY_CONTACT_PERSON_ID
					) B ON
					a.PERSON_D_ID = b.PERSON_D_ID
				WHERE
					a.PERSON_SRC_ID = @PRIMARY_CONTACT_PERSON_ID
					AND b.[ROW] = 1
			END

			IF NOT EXISTS (SELECT PERSON_D_ID FROM PERSON_D WHERE PERSON_SRC_ID = @ALT_CONTACT_PERSON_ID)
			BEGIN

				SET @ALT_CONTACT_PERSON_D_ID = -999
				SET @ALT_CONTACT_PERSON_UNQ_D_ID = -999
			END
			ELSE
			BEGIN

				SELECT
					@ALT_CONTACT_PERSON_D_ID = a.PERSON_D_ID
					, @ALT_CONTACT_PERSON_UNQ_D_ID = a.PERSON_UNQ_D_ID
				FROM
					PERSON_D a
					INNER JOIN
					(
						SELECT
							ROW_NUMBER() OVER(ORDER BY PERSON_D_ID DESC) AS ROW
							, PERSON_D_ID
							, PERSON_UNQ_D_ID
						FROM
							PERSON_D
						WHERE
							PERSON_SRC_ID = @ALT_CONTACT_PERSON_ID
					) b ON
					a.PERSON_D_ID = @ALT_CONTACT_PERSON_ID
					AND b.[ROW] = 1

			END

			IF NOT EXISTS (SELECT DELIVERY_METHOD_D_ID FROM DELIVERY_METHOD_D WHERE METHOD_SRC_ID = @DELIVERY_METHOD_ID)
			BEGIN

				SET @DELIVERY_METHOD_D_ID = -999
			END
			ELSE
			BEGIN
			--- continue lookuping up existing dimensions to get the values

				SELECT @DELIVERY_METHOD_D_ID = DELIVERY_METHOD_D_ID FROM DELIVERY_METHOD_D  WHERE METHOD_SRC_ID = @DELIVERY_METHOD_ID

			END

			IF NOT EXISTS (SELECT CITY_D_ID FROM CITY_D WHERE CITY_SRC_ID = @DELIVERY_CITY_ID)
			BEGIN
				SET @DELIVERY_CITY_D_ID = -999
			END
			ELSE
			BEGIN

				SELECT @DELIVERY_CITY_D_ID = CITY_D_ID FROM CITY_D WHERE CITY_SRC_ID = @DELIVERY_CITY_ID
			END

			IF NOT EXISTS (SELECT CITY_D_ID FROM CITY_D WHERE CITY_SRC_ID = @POSTAL_CITY_ID)
			BEGIN

				SET @POSTAL_CITY_D_ID = -999

			END
			ELSE
			BEGIN

				SELECT @POSTAL_CITY_D_ID = CITY_D_ID FROM CITY_D WHERE CITY_SRC_ID = @POSTAL_CITY_ID

			END



			--- now to return to the more familiar load process, seeing if values do or do not exist

						
-- LOAD

			IF NOT EXISTS (SELECT CUSTOMER_D_ID FROM CUSTOMER_D WHERE CUSTOMER_SRC_ID = @CUSTOMER_ID)
			BEGIN

				SET @ROWS_INS = @ROWS_INS + 1

				INSERT INTO CUSTOMER_D (CUSTOMER_SRC_ID, CUSTOMER_NAME, BILL_TO_CUSTOMER_D_ID, CUSTOMER_CATEGORY_D_ID,
					BUYING_GROUP_D_ID, PRIMARY_CONTACT_PERSON_D_ID, PRIMARY_CONTACT_PERSON_CUR_D_ID,
					ALT_CONTACT_PERSON_D_ID, ALT_CONTACT_PERSON_CUR_D_ID, DELIVERY_METHOD_D_ID, DELIVERY_CITY_D_ID,
					POSTAL_CITY_D_ID, CREDIT_LIMIT, OPENED_DATE, DISCOUNT_PERCENT, IS_STMT_SENT, IS_CREDIT_HOLD,
					PAYMENT_DAYS, PHONE_NUMBER, FAX_NUMBER, DELIVERY_RUN, RUN_POSITION, WEBSITE_URL,
					DELIVERY_ADDRESS_LINE_1, DELIVERY_ADDRESS_LINE_2, DELIVERY_POSTAL_CODE, DELIVERY_LOCATION,
					POSTAL_ADDRESS_LINE_1, POSTAL_ADDRESS_LINE_2, POSTAL_ADDRESS_CODE) 
				VALUES (@CUSTOMER_ID, @CUSTOMER_NAME, @BILL_TO_CUSTOMER_D_ID, @CUSTOMER_CATEGORY_D_ID, @BUYING_GROUP_D_ID,
					@PRIMARY_CONTACT_PERSON_D_ID, @PRIMARY_CONTACT_PERSON_UNQ_D_ID, @ALT_CONTACT_PERSON_D_ID,
					@ALT_CONTACT_PERSON_UNQ_D_ID, @DELIVERY_METHOD_D_ID, @DELIVERY_CITY_D_ID, @POSTAL_CITY_D_ID,
					@CREDIT_LIMIT, @OPEN_DATE, @DISCOUNT, @IS_STMT_SENT, @IS_CREDIT_HOLD, @PAYMENT_DAYS,
					@PHONE_NUMBER, @FAX_NUMBER, @DELIVERY_RUN, @RUN_POS, @WEB, @DELIVERY_ADDR1, 
					@DELIVERY_ADDR2, @DELIVERY_POSTAL_CODE, @DELIVERY_LOC, @POST_ADDR1, @POST_ADDR2,
					@POST_ADDR_CODE)

			END
			ELSE
			BEGIN
			--- get values loaded 
				SELECT
					@N_CUSTOMER_NAME = CUSTOMER_NAME
					, @N_BILL_TO_CUSTOMER_D_ID = BILL_TO_CUSTOMER_D_ID
					, @N_CUSTOMER_CATEGORY_D_ID = CUSTOMER_CATEGORY_D_ID
					, @N_BUYING_GROUP_D_ID = BUYING_GROUP_D_ID
					, @N_PRIMARY_CONTACT_PERSON_D_ID = PRIMARY_CONTACT_PERSON_D_ID
					, @N_ALT_CONTACT_PERSON_D_ID = ALT_CONTACT_PERSON_D_ID
					, @N_DELIVERY_METHOD_D_ID = DELIVERY_METHOD_D_ID
					, @N_DELIVERY_CITY_D_ID = DELIVERY_CITY_D_ID
					, @N_POSTAL_CITY_D_ID = POSTAL_CITY_D_ID
					, @N_CREDIT_LIMIT = CREDIT_LIMIT
					, @N_OPEN_DATE = OPENED_DATE
					, @N_DISCOUNT = DISCOUNT_PERCENT
					, @N_IS_STMT_SENT = IS_STMT_SENT
					, @N_IS_CREDIT_HOLD = IS_CREDIT_HOLD
					, @N_PAYMENT_DAYS = PAYMENT_DAYS
					, @N_PHONE_NUMBER = PHONE_NUMBER
					, @N_FAX_NUMBER = FAX_NUMBER
					, @N_DELIVERY_RUN = DELIVERY_RUN
					, @N_RUN_POS = RUN_POSITION
					, @N_WEB = WEBSITE_URL
					, @N_DELIVERY_ADDR1 = DELIVERY_ADDRESS_LINE_1
					, @N_DELIVERY_ADDR2 = DELIVERY_ADDRESS_LINE_2
					, @N_DELIVERY_POSTAL_CODE = DELIVERY_POSTAL_CODE
					, @N_DELIVERY_LOC = DELIVERY_LOCATION
					, @N_POST_ADDR1 = POSTAL_ADDRESS_LINE_1
					, @N_POST_ADDR2 = POSTAL_ADDRESS_LINE_2
					, @N_POST_ADDR_CODE = POSTAL_ADDRESS_CODE
				FROM
					CUSTOMER_D
				WHERE
					CUSTOMER_SRC_ID = @CUSTOMER_ID
					--- below we run a comparision of the values , this a prime example of where MD5 lookup would benefit performace
				IF @CUSTOMER_NAME <> @N_CUSTOMER_NAME  OR @BILL_TO_CUSTOMER_D_ID <> @N_BILL_TO_CUSTOMER_D_ID  OR
					@CUSTOMER_CATEGORY_D_ID <> @N_CUSTOMER_CATEGORY_D_ID  OR @BUYING_GROUP_D_ID <> @N_BUYING_GROUP_D_ID  OR
					@PRIMARY_CONTACT_PERSON_D_ID <> @N_PRIMARY_CONTACT_PERSON_D_ID  OR @ALT_CONTACT_PERSON_D_ID <> @N_ALT_CONTACT_PERSON_D_ID  OR
					@DELIVERY_METHOD_D_ID <> @N_DELIVERY_METHOD_D_ID  OR @DELIVERY_CITY_D_ID <> @N_DELIVERY_CITY_D_ID  OR
					@POSTAL_CITY_D_ID <> @N_POSTAL_CITY_D_ID  OR @CREDIT_LIMIT <> @N_CREDIT_LIMIT  OR @OPEN_DATE <> @N_OPEN_DATE  OR
					@DISCOUNT <> @N_DISCOUNT  OR @IS_STMT_SENT <> @N_IS_STMT_SENT  OR @IS_CREDIT_HOLD <> @N_IS_CREDIT_HOLD  OR
					@PAYMENT_DAYS <> @N_PAYMENT_DAYS  OR @PHONE_NUMBER <> @N_PHONE_NUMBER  OR @FAX_NUMBER <> @N_FAX_NUMBER  OR
					@DELIVERY_RUN <> @N_DELIVERY_RUN  OR @RUN_POS <> @N_RUN_POS  OR @WEB <> @N_WEB  OR @DELIVERY_ADDR1 <> @N_DELIVERY_ADDR1  OR
					@DELIVERY_ADDR2 <> @N_DELIVERY_ADDR2  OR @DELIVERY_POSTAL_CODE <> @N_DELIVERY_POSTAL_CODE  OR
					@DELIVERY_LOC.STEquals(@N_DELIVERY_LOC) = 0  OR @POST_ADDR1 <> @N_POST_ADDR1  OR @POST_ADDR2 <> @N_POST_ADDR2  OR
					@POST_ADDR_CODE<> @N_POST_ADDR_CODE
				BEGIN

					SET @ROWS_UPD = @ROWS_UPD + 1
					--- update if needed
					UPDATE
						CUSTOMER_D
					SET
						CUSTOMER_NAME = @CUSTOMER_NAME
						, BILL_TO_CUSTOMER_D_ID = @BILL_TO_CUSTOMER_D_ID
						, CUSTOMER_CATEGORY_D_ID = @CUSTOMER_CATEGORY_D_ID
						, BUYING_GROUP_D_ID = @BUYING_GROUP_D_ID
						, PRIMARY_CONTACT_PERSON_D_ID = @PRIMARY_CONTACT_PERSON_D_ID
						, ALT_CONTACT_PERSON_D_ID = @ALT_CONTACT_PERSON_D_ID
						, DELIVERY_METHOD_D_ID = @DELIVERY_METHOD_D_ID
						, DELIVERY_CITY_D_ID = @DELIVERY_CITY_D_ID
						, POSTAL_CITY_D_ID = @POSTAL_CITY_D_ID
						, CREDIT_LIMIT = @CREDIT_LIMIT
						, OPENED_DATE = @OPEN_DATE
						, DISCOUNT_PERCENT = @DISCOUNT
						, IS_STMT_SENT = @IS_STMT_SENT
						, IS_CREDIT_HOLD = @IS_CREDIT_HOLD
						, PAYMENT_DAYS = @PAYMENT_DAYS
						, PHONE_NUMBER = @PHONE_NUMBER
						, FAX_NUMBER = @FAX_NUMBER
						, DELIVERY_RUN = @DELIVERY_RUN
						, RUN_POSITION = @RUN_POS
						, WEBSITE_URL = @WEB
						, DELIVERY_ADDRESS_LINE_1 = @DELIVERY_ADDR1
						, DELIVERY_ADDRESS_LINE_2 = @DELIVERY_ADDR2
						, DELIVERY_POSTAL_CODE = @DELIVERY_POSTAL_CODE
						, DELIVERY_LOCATION = @DELIVERY_LOC
						, POSTAL_ADDRESS_LINE_1 = @POST_ADDR1
						, POSTAL_ADDRESS_LINE_2 = @POST_ADDR2
						, POSTAL_ADDRESS_CODE = @POST_ADDR_CODE
					WHERE
						CUSTOMER_SRC_ID = @CUSTOMER_ID

				END
				ELSE
				BEGIN
				--- otherwise implement skip
					SET @ROWS_SKIP = @ROWS_SKIP + 1

				END

			END

			FETCH NEXT FROM DB_CURSOR INTO @CUSTOMER_ID, @CUSTOMER_NAME, @BILL_TO_CUSTOMER_ID, 
				@CUSTOMER_CATEGORY_ID, @BUYING_GROUP_ID, @PRIMARY_CONTACT_PERSON_ID,
				@ALT_CONTACT_PERSON_ID, @DELIVERY_METHOD_ID, @DELIVERY_CITY_ID, @POSTAL_CITY_ID,
				@CREDIT_LIMIT, @OPEN_DATE, @DISCOUNT, @IS_STMT_SENT,
				@IS_CREDIT_HOLD, @PAYMENT_DAYS, @PHONE_NUMBER, @FAX_NUMBER,
				@DELIVERY_RUN, @RUN_POS, @WEB, @DELIVERY_ADDR1,
				@DELIVERY_ADDR2, @DELIVERY_POSTAL_CODE, @DELIVERY_LOC,
				@POST_ADDR1, @POST_ADDR2, @POST_ADDR_CODE

		END

		CLOSE DB_CURSOR
		DEALLOCATE DB_CURSOR
		--- update runs table
		INSERT INTO [dbo].[RUNS] (RUN_NAME, RUN_DT, SOURCE_COLUMNS, ROWS_INS, ROWS_DEL, ROWS_UPD, ROWS_SKIP) 
			VALUES ('CUSTOMER_D', @NEWCHECKPOINT, @SOURCE_COLUMNS, @ROWS_INS, @ROWS_DEL, @ROWS_UPD, @ROWS_SKIP)

	END

END
GO

